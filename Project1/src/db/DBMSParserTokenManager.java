/* Generated By:JavaCC: Do not edit this line. DBMSParserTokenManager.java */
package db;
import java.io.InputStream;
import java.io.PrintStream;
import dataobject.*;
import dataobject.Column.*;
import java.util.ArrayList;
import com.sleepycat.je.*;
import dataobject.Table.*;
import dataobject.Condition.*;
import dataobject.Record.*;
import db.BerkeleyDBHelper.DeleteParam;
import db.BerkeleyDBHelper.InsertParam;
import db.BerkeleyDBHelper.SelectParam;
import db.BerkeleyDBHelper.TableReference;

/** Token Manager. */
public class DBMSParserTokenManager implements DBMSParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         jjmatchedKind = 3;
         return jjMoveNfa_0(11, 0);
      case 10:
         jjmatchedKind = 4;
         return jjMoveNfa_0(11, 0);
      case 13:
         jjmatchedKind = 2;
         return jjMoveNfa_0(11, 0);
      case 32:
         jjmatchedKind = 1;
         return jjMoveNfa_0(11, 0);
      case 39:
         jjmatchedKind = 76;
         return jjMoveNfa_0(11, 0);
      case 40:
         jjmatchedKind = 70;
         return jjMoveNfa_0(11, 0);
      case 41:
         jjmatchedKind = 71;
         return jjMoveNfa_0(11, 0);
      case 42:
         jjmatchedKind = 77;
         return jjMoveNfa_0(11, 0);
      case 44:
         jjmatchedKind = 74;
         return jjMoveNfa_0(11, 0);
      case 46:
         jjmatchedKind = 78;
         return jjMoveNfa_0(11, 0);
      case 59:
         jjmatchedKind = 69;
         return jjMoveNfa_0(11, 0);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x1L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x500000000000L, 0x0L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x420200000000000L, 0x8L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x40000000000L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x2010000000000000L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x100080000000000L, 0x6L);
      case 75:
         return jjMoveStringLiteralDfa1_0(0x8000000000000L, 0x0L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x3000000000000L, 0x0L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x4000000000000L, 0x0L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x840000000000000L, 0x0L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x80800000000000L, 0x0L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x0L);
      case 95:
         jjmatchedKind = 75;
         return jjMoveNfa_0(11, 0);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x1000000008800000L, 0x1L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x500000000280L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x420200040210100L, 0x8L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x40000000020L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x2010000001008000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x100080030080040L, 0x6L);
      case 107:
         return jjMoveStringLiteralDfa1_0(0x8000000004000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x3000000001800L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x8000000004000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x4000000002000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x200000000100000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x840000000420000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x80800000040400L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x80000000L, 0x10L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x4000000002000000L, 0x0L);
      default :
         return jjMoveNfa_0(11, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(11, 0);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x80a00000000000L, active1, 0x10L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0xe08000000000000L, active1, 0x8L);
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0x4040100000000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L, active1, 0x7L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0x12000000000000L, active1, 0L);
      case 82:
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x2024400000000000L, active1, 0L);
      case 83:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 1;
         }
         break;
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000L, active1, 0L);
      case 88:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x80a00080040500L, active1, 0x10L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0xe08000040704000L, active1, 0x8L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x4040100002020080L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x80038000040L, active1, 0x7L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x12000000009000L, active1, 0L);
      case 114:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x2024400001012200L, active1, 0L);
      case 115:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 1;
         }
         break;
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000800L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000020L, active1, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(11, 1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(11, 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(11, 1);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000L, active1, 0L);
      case 66:
         return jjMoveStringLiteralDfa3_0(active0, 0x80800000000000L, active1, 0L);
      case 68:
         if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 2;
         }
         break;
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000400000000000L, active1, 0L);
      case 70:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x4040000000000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0x801000000000000L, active1, 0x18L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x2060000000000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000000L, active1, 0x2L);
      case 84:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000L, active1, 0x4L);
      case 89:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 2;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000080L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x80800000040400L, active1, 0L);
      case 100:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 2;
         }
         break;
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000400002000200L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000100000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x4040000002020L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x8010000c0400800L, active1, 0x18L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x2060000001030000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000008000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000010200000L, active1, 0x2L);
      case 116:
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 6;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x200020000100L, active1, 0x4L);
      case 121:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 2;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(11, 2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(11, 2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(11, 2);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L, active1, 0L);
      case 67:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 3;
         }
         break;
      case 69:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0xa10000000000000L, active1, 0xaL);
      case 76:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x80800000000000L, active1, 0L);
      case 77:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000L, active1, 0L);
      case 79:
         if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 3;
         }
         break;
      case 80:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 3;
         }
         break;
      case 82:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000000L, active1, 0L);
      case 84:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 3;
         }
         break;
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10L);
      case 87:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 3;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000200L, active1, 0L);
      case 99:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 3;
         }
         break;
      case 101:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0xa10000050508000L, active1, 0xaL);
      case 108:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x80800000040400L, active1, 0L);
      case 109:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000002000L, active1, 0L);
      case 111:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 3;
         }
         break;
      case 112:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 3;
         }
         break;
      case 114:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000002000000L, active1, 0L);
      case 116:
         if ((active0 & 0x20L) != 0L)
         {
            jjmatchedKind = 5;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 3;
         }
         break;
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000L, active1, 0x10L);
      case 119:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 3;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(11, 3);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(11, 3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(11, 3);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000000L, active1, 0L);
      case 69:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000000L, active1, 0x10L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000000L, active1, 0x2L);
      case 84:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000L, active1, 0x8L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000002000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000400000L, active1, 0L);
      case 101:
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x80000080040000L, active1, 0x10L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000008000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000010100000L, active1, 0x2L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x400040000200L, active1, 0x8L);
      default :
         break;
   }
   return jjMoveNfa_0(11, 4);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(11, 4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(11, 4);
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000000L, active1, 0L);
      case 71:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000L, active1, 0L);
      case 83:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 5;
         }
         break;
      case 84:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 5;
         }
         break;
      case 101:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000100000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000008000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000002000L, active1, 0L);
      case 115:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 5;
         }
         break;
      case 116:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 5;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(11, 5);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(11, 5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(11, 5);
   }
   switch(curChar)
   {
      case 78:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000000L);
      case 89:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 6;
         }
         break;
      case 110:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000100000L);
      case 121:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 6;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(11, 6);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(11, 6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(11, 6);
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000000L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000100000L);
      default :
         break;
   }
   return jjMoveNfa_0(11, 7);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(11, 7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(11, 7);
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000000000L);
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000100000L);
      default :
         break;
   }
   return jjMoveNfa_0(11, 8);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(11, 8);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(11, 8);
   }
   switch(curChar)
   {
      case 83:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 9;
         }
         break;
      case 115:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 9;
         }
         else if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 9;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(11, 9);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int strKind = jjmatchedKind;
   int strPos = jjmatchedPos;
   int seenUpto;
   input_stream.backup(seenUpto = curPos + 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { throw new Error("Internal Error"); }
   curPos = 0;
   int startsAt = 0;
   jjnewStateCnt = 128;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 11:
                  if ((0xffffff7b00000000L & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                  }
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(61, 62);
                  if ((0xfc00ff7a00000000L & l) != 0L)
                  {
                     if (kind > 86)
                        kind = 86;
                  }
                  else if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 82)
                        kind = 82;
                     jjCheckNAddStates(0, 3);
                  }
                  if ((0x7000000000000000L & l) != 0L)
                  {
                     if (kind > 73)
                        kind = 73;
                  }
                  else if ((0x280000000000L & l) != 0L)
                  {
                     if (kind > 72)
                        kind = 72;
                     jjCheckNAdd(111);
                  }
                  else if (curChar == 33)
                     jjCheckNAdd(54);
                  if (curChar == 60)
                     jjCheckNAdd(54);
                  else if (curChar == 62)
                     jjCheckNAdd(54);
                  break;
               case 1:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 13:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 21:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 32:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 43:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 53:
                  if ((0x7000000000000000L & l) != 0L && kind > 73)
                     kind = 73;
                  break;
               case 54:
                  if (curChar == 61 && kind > 73)
                     kind = 73;
                  break;
               case 55:
                  if (curChar == 62)
                     jjCheckNAdd(54);
                  break;
               case 56:
                  if (curChar == 60)
                     jjCheckNAdd(54);
                  break;
               case 57:
                  if (curChar == 33)
                     jjCheckNAdd(54);
                  break;
               case 58:
                  if ((0xfc00ff7a00000000L & l) != 0L && kind > 86)
                     kind = 86;
                  break;
               case 59:
                  if ((0xffffff7b00000000L & l) != 0L && kind > 87)
                     kind = 87;
                  break;
               case 60:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(61, 62);
                  break;
               case 61:
                  if ((0xffffff7b00000000L & l) != 0L)
                     jjCheckNAddTwoStates(61, 62);
                  break;
               case 62:
                  if (curChar == 39 && kind > 88)
                     kind = 88;
                  break;
               case 65:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 75:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 85:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 91:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 93:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 101:
                  if (curChar == 32)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 110:
                  if ((0x280000000000L & l) == 0L)
                     break;
                  if (kind > 72)
                     kind = 72;
                  jjCheckNAdd(111);
                  break;
               case 111:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAdd(111);
                  break;
               case 114:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 82)
                     kind = 82;
                  jjCheckNAddStates(0, 3);
                  break;
               case 115:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 116:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 117:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 118:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 119:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 120:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 121:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 122:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 123:
                  if ((0x3ff000000000000L & l) != 0L && kind > 83)
                     kind = 83;
                  break;
               case 124:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 125:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 126;
                  break;
               case 126:
                  if ((0x3ff000000000000L & l) != 0L && kind > 84)
                     kind = 84;
                  break;
               case 127:
                  if ((0x3ff000000000000L & l) != 0L && kind > 85)
                     kind = 85;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 11:
                  if ((0x7fffffffffffffffL & l) != 0L)
                  {
                     if (kind > 87)
                        kind = 87;
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 80)
                        kind = 80;
                     jjCheckNAdd(113);
                  }
                  else if ((0x78000001f8000001L & l) != 0L)
                  {
                     if (kind > 86)
                        kind = 86;
                  }
                  if (curChar == 105)
                     jjAddStates(4, 6);
                  else if (curChar == 100)
                     jjAddStates(7, 8);
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 51;
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 40;
                  else if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 29;
                  else if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 18;
                  else if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 0:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if (curChar == 101 && kind > 33)
                     kind = 33;
                  break;
               case 3:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 8:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 12:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 14:
                  if (curChar == 108 && kind > 34)
                     kind = 34;
                  break;
               case 15:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 19:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 22:
                  if (curChar == 121 && kind > 35)
                     kind = 35;
                  break;
               case 23:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 107)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 26:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 33:
                  if (curChar == 121 && kind > 36)
                     kind = 36;
                  break;
               case 34:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if (curChar == 107)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 37:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 40:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if (curChar == 119)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 44:
                  if (curChar == 115 && kind > 41)
                     kind = 41;
                  break;
               case 45:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 51:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 58:
                  if ((0x78000001f8000001L & l) != 0L && kind > 86)
                     kind = 86;
                  break;
               case 59:
                  if ((0x7fffffffffffffffL & l) != 0L && kind > 87)
                     kind = 87;
                  break;
               case 61:
                  if ((0x7fffffffffffffffL & l) != 0L)
                     jjAddStates(9, 10);
                  break;
               case 63:
                  if (curChar == 100)
                     jjAddStates(7, 8);
                  break;
               case 64:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 66:
                  if (curChar == 109 && kind > 32)
                     kind = 32;
                  break;
               case 67:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 68:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 71:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 76:
                  if (curChar == 101 && kind > 40)
                     kind = 40;
                  break;
               case 77:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 82:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if (curChar == 105)
                     jjAddStates(4, 6);
                  break;
               case 84:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 86:
                  if (curChar == 108 && kind > 37)
                     kind = 37;
                  break;
               case 87:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 89:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 90:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 92:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 94:
                  if (curChar == 108 && kind > 38)
                     kind = 38;
                  break;
               case 95:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 96:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 97:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 98:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 99:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 100:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 102:
                  if (curChar == 111 && kind > 39)
                     kind = 39;
                  break;
               case 103:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 104:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 105:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 106:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 107:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 108:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 109:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 112:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAdd(113);
                  break;
               case 113:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 80)
                     kind = 80;
                  jjCheckNAdd(113);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 128 - (jjnewStateCnt = startsAt)))
         break;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { break; }
   }
   if (jjmatchedPos > strPos)
      return curPos;

   int toRet = Math.max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) { throw new Error("Internal Error : Please send a bug report."); }

   if (jjmatchedPos < strPos)
   {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
   }
   else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

   return toRet;
}
static final int[] jjnextStates = {
   111, 115, 124, 127, 84, 90, 109, 73, 82, 61, 62, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\145\170\151\164", "\151\156\164", 
"\143\150\141\162", "\144\141\164\145", "\143\162\145\141\164\145", "\164\141\142\154\145", 
"\156\165\154\154", "\156\157\164", "\160\162\151\155\141\162\171", "\153\145\171", 
"\146\157\162\145\151\147\156", "\144\162\157\160", "\163\150\157\167", "\164\141\142\154\145\163", 
"\151\163", "\162\145\146\145\162\145\156\143\145\163", "\144\145\163\143", 
"\163\145\154\145\143\164", "\141\163", "\146\162\157\155", "\167\150\145\162\145", "\157\162", 
"\141\156\144", "\151\156\163\145\162\164", "\151\156\164\157", "\144\145\154\145\164\145", 
"\166\141\154\165\145\163", null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, "\73", "\50", "\51", 
null, null, "\54", "\137", "\47", "\52", "\56", null, null, null, null, null, null, 
null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffffe1L, 0x1ff7fffL, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[128];
private final int[] jjstateSet = new int[256];
protected char curChar;
/** Constructor. */
public DBMSParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public DBMSParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 128; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
